import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from db import save_user_role, create_table_if_not_exists, save_user_department, get_user_department
from ai import ask_ai
from db import get_user_role
from telebot import types


# üîë –¢–æ–∫–µ–Ω
TOKEN = '7310104929:AAFQ275lxn5YJvitmZ-G96NQsBolI16LGZc'
bot = telebot.TeleBot(TOKEN)

# –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
professions = ['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–î–∏–∑–∞–π–Ω–µ—Ä', '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ê–Ω–∞–ª–∏—Ç–∏–∫']
departments = ["–ü—Ä–æ–¥–∞–∂–∏", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "HR", "–§–∏–Ω–∞–Ω—Å—ã"]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = InlineKeyboardMarkup()
    for prof in professions:
        markup.add(InlineKeyboardButton(text=prof, callback_data=f"profession_{prof}"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è ai-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ–±–ª–∞–¥–∞—é –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥–µ–ª –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('profession_'))
def handle_profession_choice(call):
    chosen_prof = call.data.split("_", 1)[1]
    telegram_id = call.from_user.id 

    save_user_role(telegram_id, chosen_prof)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: {chosen_prof}"
    )

    markup = types.InlineKeyboardMarkup()
    for dept in departments:
        markup.add(types.InlineKeyboardButton(text=dept, callback_data=f"department_{dept}"))

    bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –æ—Ç–¥–µ–ª:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('department_'))
def handle_department_choice(call):
    chosen_dept = call.data.split("_", 1)[1]
    telegram_id = call.from_user.id

    save_user_department(telegram_id, chosen_dept)

    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–¥–µ–ª: {chosen_dept}.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–≤–æ–µ–º—É AI-–ø–æ–º–æ—â–Ω–∏–∫—É."
    )


@bot.message_handler(func=lambda msg: True)
def handle_user_question(message):
    user_id = message.from_user.id
    role = get_user_role(user_id)
    department = get_user_department(user_id)

    if not role:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return

    if not department:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –æ—Ç–¥–µ–ª, –ø—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        return

    question = message.text
    bot.send_chat_action(message.chat.id, 'typing')

    try:
        answer = ask_ai(role, department, question)
        bot.reply_to(message, answer)
    except Exception as e:
        print(f"AI error: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.")


if __name__ == '__main__':
    create_table_if_not_exists()
    bot.polling()
